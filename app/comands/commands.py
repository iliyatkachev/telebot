from aiogram import F, types, Router
from aiogram.types import InlineKeyboardMarkup
from app.SQL.sql import fetch_user_date, ferch_all_users, find_public_ids
from app.click.keybort import menu_button, back_button, admin_button
from app.channel.channel_funk import channels_add
from aiogram.utils.markdown import hlink
from urllib.parse import quote

import aiohttp


commands_router = Router()


#command menu
@commands_router.callback_query(F.data == "menu")
async def menu(callback: types.CallbackQuery):
    public_ids = find_public_ids()

    user_id = callback.from_user.id
    sub = True

    for chat_id in public_ids:
        try:
            status = await callback.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            if status.status not in ['creator', 'administrator', 'member']:
                sub = False
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –ø–∞–±–ª–∏–∫ {chat_id}: {e}")
            sub = False
            break

    if not sub:
        return await channels_add(callback)
    else:

        await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –º–µ–Ω—é')
        await callback.message.delete()
        reply_markup = InlineKeyboardMarkup(inline_keyboard=menu_button)
        await callback.message.answer(text=f'–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞,'
                                           f' –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µü´†',
                                      reply_markup=reply_markup)






#command faims
@commands_router.inline_query()
async def inline_films(inline_query: types.InlineQuery):
    base_url = "https://apivb.info/api/videos.json?title={}&token=0befa987b7d85bcdad0b31e2e7c3f4ec"
    search_query = quote(inline_query.query)  # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ URL

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å —É—á–µ—Ç–æ–º –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    url = base_url.format(search_query)

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            results = []

            if response.status == 200:
                movies = await response.json(content_type=None)
                for index, movie in enumerate(movies, start=1):
                    title = movie.get("title_ru", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                    iframe_url = movie.get("iframe_url", "#")
                    text = f'–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\nURL: {hlink("–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º", iframe_url)}'

                    result = types.InlineQueryResultArticle(
                        id=str(index),
                        title=title,
                        input_message_content=types.InputTextMessageContent(
                            message_text=text, parse_mode="HTML"
                        ),
                        description="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ",
                    )
                    results.append(result)

            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            await inline_query.answer(results, cache_time=1)


#command profile
@commands_router.callback_query(F.data == "profile")
async def profile(callback: types.CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—å')
    await callback.message.delete()
    user_id = callback.from_user.id
    date = fetch_user_date(user_id)
    await callback.message.answer(f'<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {callback.from_user.full_name}\n'
                                  f'<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>: {date}\n'
                                  f'<b>ID users</b>: <code>{callback.from_user.id}</code>')

@commands_router.callback_query(F.data == "s_full_users")
async def s_full_users(callback: types.CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    await callback.message.delete()
    all_users = str(ferch_all_users())
    await callback.message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>{all_users}')


#command videogiad
@commands_router.callback_query(F.data == "videogaid")
async def videogaid(callback: types.CallbackQuery):
    reply_markup = InlineKeyboardMarkup(inline_keyboard=back_button)
    url = "https://drive.google.com/uc?export=download&id=1aw5xnktqOgGq6U7OF-R3ykJkYLc6tQT7"
    await callback.message.delete()
    await callback.message.answer_video(video=url, caption='–≠—Ç–æ –≤–∏–¥–µ–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–Ω—è—Ç—å,'
                                                         '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º', reply_markup=reply_markup)



#command opportunities
@commands_router.callback_query(F.data == "opportunities")
async def opportunities(callback: types.CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')
    await callback.message.delete()
    await callback.message.answer(text="–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫ –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª–∏ "
                                       "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!")

@commands_router.callback_query(F.data == "back_a_m")
async def a_menu(callback: types.CallbackQuery):
    reply_markup = InlineKeyboardMarkup(inline_keyboard=admin_button)
    await callback.message.delete()
    await callback.message.answer(text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', reply_markup=reply_markup)

@commands_router.callback_query(F.data == "check_me")
async def check_me(callback: types.CallbackQuery):
    return await menu(callback)



