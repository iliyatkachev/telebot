from aiogram import F, types, Router
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.SQL.sql import fetch_user_date, ferch_all_users, find_public_ids
from app.click.keybort import menu_button, back_button, admin_button
from app.channel.channel_funk import channels_add
from aiogram.utils.markdown import hlink
from urllib.parse import quote
from uuid import uuid4
from app.click.keybort import again

import aiohttp


commands_router = Router()


#command menu
@commands_router.callback_query(F.data == "menu")
async def menu(callback: types.CallbackQuery):
    public_ids = find_public_ids()

    user_id = callback.from_user.id
    sub = True

    for chat_id in public_ids:
        try:
            status = await callback.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            if status.status not in ['creator', 'administrator', 'member']:
                sub = False
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –ø–∞–±–ª–∏–∫ {chat_id}: {e}")
            sub = False
            break

    if not sub:
        return await channels_add(callback)
    else:

        await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –º–µ–Ω—é')
        await callback.message.delete()
        reply_markup = InlineKeyboardMarkup(inline_keyboard=menu_button)
        await callback.message.answer(text=f'–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞,'
                                           f' –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µü´†',
                                      reply_markup=reply_markup)






#command faims
@commands_router.inline_query()
async def inline_films(inline_query: types.InlineQuery):
    base_url = "https://apivb.info/api/videos.json?title={}&token=30c9ab7fcdf48b3b3d2eda889b6637cd"
    search_query = quote(inline_query.query)  # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ URL

    url = base_url.format(search_query)

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            results = []
            if response.status == 200:
                response = await response.json(content_type=None)
            if isinstance(response, list):
                films = response[:50]
            elif isinstance(response, dict):
                films = response.get('data', [])[:50]
            else:
                films = []

            for film in films:
                title = film.get('title_ru') or film.get('title_en')
                description = f"{film.get('year', '–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')}"
                trailer_url = film.get('trailer', '').replace('\\/', '/')
                poster_url = film.get('poster', '').replace('\\/', '/')
                quality = film.get('quality', '')
                iframe_url = film.get('iframe_url', '').replace('\\/', '/')


                unique_id = str(uuid4())

                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ–∏–ª—å–º–∞
                keyboard_buttons = [
                    [types.InlineKeyboardButton(text="ü§ó –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", url=iframe_url)]
                ]

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–π–ª–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
                if trailer_url:
                    keyboard_buttons.append([types.InlineKeyboardButton(text="üé¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url)])

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
                keyboard_buttons.append(
                    [types.InlineKeyboardButton(text='‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫', switch_inline_query_current_chat=""),
                     types.InlineKeyboardButton(text='üëà –í –º–µ–Ω—é', callback_data='back_user_now')])

                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

                # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∏—Å–∫–∞

                result_text = types.InputTextMessageContent(
                    message_text=f"üìΩÔ∏è <b> –ù–∞–∑–≤–∞–Ω–∏–µ: {film.get('title_ru')}</b>\n({film.get('title_en')})\n\n"
                                 f"üï• <b>–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</b> {description}\n\n"
                                 f"üì∑ <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n\n –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üçø"
                )

                results.append(types.InlineQueryResultArticle(
                    id=unique_id,
                    title=title,
                    input_message_content=result_text,
                    description=description,
                    thumbnail_url=poster_url,
                    reply_markup=keyboard,
                ))

            if not films:
                unique_id = str(uuid4())

                ag_but = InlineKeyboardMarkup(inline_keyboard=again)

                results.append(types.InlineQueryResultArticle(
                    id=unique_id,
                    title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ü´£",
                    input_message_content=types.InputTextMessageContent(message_text='–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'),
                    description="–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á–µ–º—É",
                    reply_markup=ag_but
                ))

            await inline_query.answer(results, cache_time=1, is_personal=True)


#command profile
@commands_router.callback_query(F.data == "profile")
async def profile(callback: types.CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—å')
    await callback.message.delete()
    user_id = callback.from_user.id
    date = fetch_user_date(user_id)
    await callback.message.answer(f'<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {callback.from_user.full_name}\n'
                                  f'<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>: {date}\n'
                                  f'<b>ID users</b>: <code>{callback.from_user.id}</code>')

@commands_router.callback_query(F.data == "s_full_users")
async def s_full_users(callback: types.CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    await callback.message.delete()
    all_users = str(ferch_all_users())
    await callback.message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>{all_users}')


#command videogiad
@commands_router.callback_query(F.data == "videogaid")
async def videogaid(callback: types.CallbackQuery):
    reply_markup = InlineKeyboardMarkup(inline_keyboard=back_button)
    url = "https://drive.google.com/uc?export=download&id=1aw5xnktqOgGq6U7OF-R3ykJkYLc6tQT7"
    await callback.message.delete()
    await callback.message.answer_video(video=url, caption='–≠—Ç–æ –≤–∏–¥–µ–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–Ω—è—Ç—å,'
                                                         '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º', reply_markup=reply_markup)



#command opportunities
@commands_router.callback_query(F.data == "opportunities")
async def opportunities(callback: types.CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')
    await callback.message.delete()
    await callback.message.answer(text="–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫ –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª–∏ "
                                       "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!")

@commands_router.callback_query(F.data == "back_a_m")
async def a_menu(callback: types.CallbackQuery):
    reply_markup = InlineKeyboardMarkup(inline_keyboard=admin_button)
    await callback.message.delete()
    await callback.message.answer(text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', reply_markup=reply_markup)

@commands_router.callback_query(F.data == "check_me")
async def check_me(callback: types.CallbackQuery):
    return await menu(callback)




@commands_router.callback_query(F.data == "Compilation")
async def compilation(callback: types.CallbackQuery, page=1):
    films_URL = f"http://api.kinopoisk.dev/v1.4/movie?page={page}&limit=10&lists=top250"
    headers = {
        "accept": "application/json",
        "X-API-KEY": "R3ZHKRH-HXV4BW8-JSDD6W9-CZX102N"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url=films_URL, headers=headers) as response:
                if response.status == 200:
                    data = await response.json(content_type=None)
                    films = data.get('docs', [])

                    messages = []
                    for index, film in enumerate(films, start=1 + (page - 1) * 10):
                        name = film.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                        shortDescription = film.get('shortDescription', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                        year = film.get('year', '–î–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                        message = f"{index}. <b>{name}:</b>\n{shortDescription}\n<b>{year}</b>"
                        messages.append(message)

                    keyboard = [
                        [
                            types.InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"next_page_{page + 1}")
                        ]
                    ]
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)

                    if messages:
                        await callback.message.answer('\n\n'.join(messages), parse_mode='HTML', reply_markup=keyboard)
                    else:
                        await callback.message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                else:
                    await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API.")
    except Exception as e:
        print(callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"))

